@using AIStoryBuilders.AI
@using AIStoryBuilders.Model;
@using AIStoryBuilders.Models;
@using AIStoryBuilders.Services;
@using static AIStoryBuilders.AI.OrchestratorMethods
@using Newtonsoft.Json;
@inherits OwningComponentBase
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject SettingsService SettingsService
@inject IJSRuntime JSRuntime
<h3>Settings</h3>
<RadzenRow AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap" Gap="1rem" Class="rz-p-sm-12">
    <RadzenColumn Size="8" SizeSM="4">
        <RadzenStack>
            <RadzenFormField Text="OpenAI Service Type:" Variant="@variant">
                <RadzenDropDown Data=@colAITypes @bind-Value="@AIType" Style="width:300px" Change="@(args => ChangeAIType(args))" />
            </RadzenFormField>
            @if (AIType != "LM Studio" && AIType != "Ollama")
            {
                <RadzenFormField Text="ApiKey:" Variant="@variant">
                    <RadzenTextBox @bind-Value="@CurrentApiKey" @onkeydown="APIKeyDetection" style="width:450px;" />
                </RadzenFormField>
            }
            @if (AIType == "OpenAI")
            {
                <RadzenFormField Text="Default AI Model:" Variant="@variant">
                    <RadzenDropDown Data=@colModels @bind-Value="@OpenAIModel" Style="width:300px" />
                </RadzenFormField>
                <RadzenLabel Text="Note: GPT 3.5 is faster and cost less than GPT 4, but does not perform as well." style="font-size:x-small" />
            }
            else if (AIType == "Azure OpenAI")
            {
                <RadzenFormField Text="Azure OpenAI Model Deployment Name:" Variant="@variant">
                    <RadzenTextBox @bind-Value="@AzureModel" style="width:450px;" />
                </RadzenFormField>
                <RadzenFormField Text="Azure OpenAI Embedding Model Deployment Name:" Variant="@variant">
                    <RadzenTextBox @bind-Value="@AzureEmbeddingModel" style="width:450px;" />
                </RadzenFormField>
                <RadzenFormField Text="Azure OpenAI Endpoint:" Variant="@variant">
                    <RadzenTextBox @bind-Value="@AzureEndpoint" style="width:450px;" />
                </RadzenFormField>
                <RadzenFormField Text="Azure OpenAI Api Version:" Variant="@variant">
                    <RadzenTextBox @bind-Value="@AzureApiVersion" style="width:450px;" />
                </RadzenFormField>
            }
            else if (AIType == "LM Studio")
            {
                <RadzenFormField Text="Endpoint:" Variant="@variant">
                    <RadzenTextBox @bind-Value="@LMStudioEndpoint" style="width:450px;" />
                </RadzenFormField>
                <RadzenFormField Text="Model Name:" Variant="@variant">
                    <RadzenTextBox @bind-Value="@LMStudioModel" style="width:450px;" />
                </RadzenFormField>
                <RadzenFormField Text="Embedding Model Name:" Variant="@variant">
                    <RadzenTextBox @bind-Value="@LMStudioEmbeddingModel" style="width:450px;" />
                </RadzenFormField>
            }
            else if (AIType == "Ollama")
            {
                <RadzenFormField Text="Endpoint:" Variant="@variant">
                    <RadzenTextBox @bind-Value="@OllamaEndpoint" style="width:450px;" />
                </RadzenFormField>
                <RadzenFormField Text="Model Name:" Variant="@variant">
                    <RadzenTextBox @bind-Value="@OllamaModel" style="width:450px;" />
                </RadzenFormField>
                <RadzenFormField Text="Embedding Model Name:" Variant="@variant">
                    <RadzenTextBox @bind-Value="@OllamaEmbeddingModel" style="width:450px;" />
                </RadzenFormField>
            }
            @if (!IsSettingsEntered)
            {
                @if (AIType == "OpenAI")
                {
                    <RadzenButton Text="An OpenAI API Key is required (Click here to get one)" ButtonStyle="ButtonStyle.Secondary"
                                  Click="GetAPIKey"
                                  Style="margin-bottom: 10px; width: 500px" />
                }
                else if (AIType == "Azure OpenAI")
                {
                    <RadzenButton Text="An Azure OpenAI API Key is required (Click here to get one)" ButtonStyle="ButtonStyle.Secondary"
                                  Click="GetAzureAPIKey"
                                  Style="margin-bottom: 10px; width: 500px" />
                }
                else if (AIType == "LM Studio" || AIType == "Ollama")
                {
                    <RadzenButton Text="No external key needed" ButtonStyle="ButtonStyle.Secondary"
                                  Disabled="true"
                                  Style="margin-bottom: 10px; width: 500px" />
                }
            }
            <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Primary" Click="SettingsSave" Style="margin-bottom: 10px; width: 500px" />
        </RadzenStack>
    </RadzenColumn>
</RadzenRow>
@code {
    [Parameter] public EventCallback SettingsChanged { get; set; }
    OrchestratorMethods OrchestratorMethods;
    Variant variant = Variant.Outlined;

    string DefaultAIModel = "gpt-4o";
    string AIType = "OpenAI";

    // Specific variables for each AI type
    string OpenAIApiKey = "";
    string OpenAIModel = "";
    string OpenAIEmbeddingModel = "";
    string OpenAIEndpoint = "";

    string AzureApiKey = "";
    string AzureModel = "";
    string AzureEmbeddingModel = "";
    string AzureEndpoint = "";
    string AzureApiVersion = "";

    string LMStudioModel = "";
    string LMStudioEmbeddingModel = "";
    string LMStudioEndpoint = "";

    string OllamaModel = "";
    string OllamaEmbeddingModel = "";
    string OllamaEndpoint = "";

    List<string> colAITypes = new List<string>()
                {
                   "OpenAI","Azure OpenAI", "LM Studio", "Ollama"
                };

    List<string> colModels = new List<string>()
                {
                   "gpt-4o","gpt-4.1"
                };

    bool IsSettingsEntered = false;

    protected override void OnInitialized()
    {
        SettingsService.LoadSettings();

        OrchestratorMethods = (OrchestratorMethods)ScopedServices.GetService(typeof(OrchestratorMethods));

        // Load OpenAI
        OpenAIApiKey = SettingsService.GetApiKey("OpenAI");
        OpenAIModel = SettingsService.GetAIModel("OpenAI");
        OpenAIEmbeddingModel = SettingsService.GetAIEmbeddingModel("OpenAI");
        OpenAIEndpoint = SettingsService.GetEndpoint("OpenAI");

        // Load Azure OpenAI
        AzureApiKey = SettingsService.GetApiKey("Azure OpenAI");
        AzureModel = SettingsService.GetAIModel("Azure OpenAI");
        AzureEmbeddingModel = SettingsService.GetAIEmbeddingModel("Azure OpenAI");
        AzureEndpoint = SettingsService.GetEndpoint("Azure OpenAI");
        AzureApiVersion = SettingsService.GetApiVersion("Azure OpenAI");

        // Load LM Studio
        LMStudioModel = SettingsService.GetAIModel("LM Studio");
        LMStudioEmbeddingModel = SettingsService.GetAIEmbeddingModel("LM Studio");
        LMStudioEndpoint = SettingsService.GetEndpoint("LM Studio");

        // Load Ollama
        OllamaModel = SettingsService.GetAIModel("Ollama");
        OllamaEmbeddingModel = SettingsService.GetAIEmbeddingModel("Ollama");
        OllamaEndpoint = SettingsService.GetEndpoint("Ollama");
    }

    // Helper properties for current AI type
    string CurrentApiKey
    {
        get => AIType switch
        {
            "OpenAI" => OpenAIApiKey,
            "Azure OpenAI" => AzureApiKey,
            _ => ""
        };
        set
        {
            switch (AIType)
            {
                case "OpenAI": OpenAIApiKey = value; break;
                case "Azure OpenAI": AzureApiKey = value; break;
            }
        }
    }

    string CurrentModel
    {
        get => AIType switch
        {
            "OpenAI" => OpenAIModel,
            "Azure OpenAI" => AzureModel,
            "LM Studio" => LMStudioModel,
            "Ollama" => OllamaModel,
            _ => ""
        };
        set
        {
            switch (AIType)
            {
                case "OpenAI": OpenAIModel = value; break;
                case "Azure OpenAI": AzureModel = value; break;
                case "LM Studio": LMStudioModel = value; break;
                case "Ollama": OllamaModel = value; break;
            }
        }
    }

    string CurrentEmbeddingModel
    {
        get => AIType switch
        {
            "OpenAI" => OpenAIEmbeddingModel,
            "Azure OpenAI" => AzureEmbeddingModel,
            "LM Studio" => LMStudioEmbeddingModel,
            "Ollama" => OllamaEmbeddingModel,
            _ => ""
        };
        set
        {
            switch (AIType)
            {
                case "OpenAI": OpenAIEmbeddingModel = value; break;
                case "Azure OpenAI": AzureEmbeddingModel = value; break;
                case "LM Studio": LMStudioEmbeddingModel = value; break;
                case "Ollama": OllamaEmbeddingModel = value; break;
            }
        }
    }

    string CurrentEndpoint
    {
        get => AIType switch
        {
            "OpenAI" => OpenAIEndpoint,
            "Azure OpenAI" => AzureEndpoint,
            "LM Studio" => LMStudioEndpoint,
            "Ollama" => OllamaEndpoint,
            _ => ""
        };
        set
        {
            switch (AIType)
            {
                case "OpenAI": OpenAIEndpoint = value; break;
                case "Azure OpenAI": AzureEndpoint = value; break;
                case "LM Studio": LMStudioEndpoint = value; break;
                case "Ollama": OllamaEndpoint = value; break;
            }
        }
    }

    string CurrentApiVersion
    {
        get => AIType == "Azure OpenAI" ? AzureApiVersion : "";
        set { if (AIType == "Azure OpenAI") AzureApiVersion = value; }
    }

    private async Task GetAPIKey()
    {
        await JSRuntime.InvokeVoidAsync("open", "https://platform.openai.com/account/api-keys");
    }

    private async Task GetAzureAPIKey()
    {
        await JSRuntime.InvokeVoidAsync("open", "https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/create-resource?pivots=web-portal");
    }

    private void APIKeyDetection(KeyboardEventArgs args)
    {
        IsSettingsEntered = true;
    }

    private async Task SettingsSave()
    {
        try
        {
            if (!IsAnyServiceConfigured())
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "Please enter valid settings for at least one AI service type.",
                        Duration = 4000
                    });
                return;
            }

            // Validate the API key only if using OpenAI
            if (AIType == "OpenAI" && !OpenAIApiKey.StartsWith("sk-"))
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "Invalid API Key - must start with: sk-",
                        Duration = 4000
                    });

                return;
            }

            if ((AIType == "LM Studio" || AIType == "Ollama") &&
                (string.IsNullOrWhiteSpace(CurrentEndpoint) || string.IsNullOrWhiteSpace(CurrentModel)))
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "Endpoint and Model Name are required for Local models.",
                        Duration = 4000
                    });

                return;
            }

            // Update Settings
            await SettingsService.SaveSettings(
                "", // Organization (not used)
                CurrentApiKey,
                CurrentModel,
                AIType,
                CurrentEndpoint,
                CurrentApiVersion,
                CurrentEmbeddingModel
            );

            // Test API Key or Endpoint only if not Local
            if (AIType != "LM Studio" && AIType != "Ollama")
            {
                var result = await OrchestratorMethods.TestAccess(CurrentModel);
            }

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Saved",
                    Duration = 4000
                });

            await SettingsChanged.InvokeAsync();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 8000
                });
        }
    }

    private bool IsAnyServiceConfigured()
    {
        bool isLocalConfigured =
            (AIType == "LM Studio" && !string.IsNullOrWhiteSpace(LMStudioModel) && !string.IsNullOrWhiteSpace(LMStudioEndpoint));

        bool isOllamaConfigured =
            (AIType == "Ollama" && !string.IsNullOrWhiteSpace(OllamaModel) && !string.IsNullOrWhiteSpace(OllamaEndpoint));

        bool isOpenAIConfigured =
            (AIType == "OpenAI" && !string.IsNullOrWhiteSpace(OpenAIApiKey) && OpenAIApiKey.StartsWith("sk-"));

        bool isAzureConfigured =
            (AIType == "Azure OpenAI"
                && !string.IsNullOrWhiteSpace(AzureApiKey)
                && !string.IsNullOrWhiteSpace(AzureModel)
                && !string.IsNullOrWhiteSpace(AzureEndpoint)
                && !string.IsNullOrWhiteSpace(AzureApiVersion));

        return isLocalConfigured || isOllamaConfigured || isOpenAIConfigured || isAzureConfigured;
    }

    private void ChangeAIType(dynamic paramAIType)
    {
        AIType = paramAIType;
        StateHasChanged();
    }
}